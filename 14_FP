{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Section:** ALL K folds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jbcabral/miniconda2/envs/howfar/lib/python3.7/site-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.metrics.ranking module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.metrics. Anything that cannot be imported from sklearn.metrics is now part of the private API.\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import itertools as it\n",
    "import warnings\n",
    "import time\n",
    "import pickle\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "%matplotlib inline\n",
    "from matplotlib import pyplot as plt\n",
    "from matplotlib import cm\n",
    "import seaborn as sns\n",
    "\n",
    "import joblib\n",
    "\n",
    "import pathlib\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.exceptions import DataConversionWarning\n",
    "from sklearn.model_selection import (\n",
    "    KFold, StratifiedKFold, train_test_split)\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "import tqdm\n",
    "\n",
    "from libs.container import Container\n",
    "from libs.nearest import nearest\n",
    "from libs.experiment import WithAnotherExperiment, roc, metrics\n",
    "from libs.precstar import  prec_star\n",
    "\n",
    "warnings.simplefilter(\"ignore\", category=DataConversionWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 20min 51s, sys: 3min 43s, total: 24min 34s\n",
      "Wall time: 6min 6s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "PATH = pathlib.Path(os.path.abspath(os.path.dirname(\"\")))\n",
    "\n",
    "DATA_PATH = PATH / \"_data\"\n",
    "\n",
    "COLUMNS_NO_FEATURES = ['id', 'tile', 'cnt', 'ra_k', 'dec_k', 'vs_type', 'vs_catalog', 'cls'] \n",
    "\n",
    "path = \"_data/full_scaled.pkl.bz2\"\n",
    "\n",
    "train_datas = {}\n",
    "\n",
    "sample = pd.read_pickle(path)\n",
    "\n",
    "# the features\n",
    "X_columns = [c for c in sample.columns if c not in COLUMNS_NO_FEATURES]\n",
    "y_column = \"cls\"\n",
    "\n",
    "sample[X_columns] =  sample[X_columns].astype(np.float32)\n",
    "\n",
    "data = Container({k: v for k, v in sample.groupby(\"tile\")})\n",
    "\n",
    "del sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "FIXED_RECALL = .5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run the k-fold classifiers with the selected parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy',\n",
       " 'max_features': 'log2',\n",
       " 'min_samples_split': 2,\n",
       " 'n_estimators': 500}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RF_PARAMS = joblib.load(\"_cache/best_params.pkl.bz2\")[\"rf\"]\n",
    "if \"n_jobs\" in RF_PARAMS:\n",
    "    del RF_PARAMS[\"n_jobs\"]\n",
    "# RF_PARAMS[\"n_jobs\"]  = -1\n",
    "RF_PARAMS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"_cache/all_kfolds_results.pkl.bz2\"\n",
    "kfolds_results = joblib.load(filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using K-fold to check another tile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'b206': 0.45999999999999996,\n",
       " 'b214': 0.33599999999999997,\n",
       " 'b216': 0.41000000000000003,\n",
       " 'b220': 0.542,\n",
       " 'b228': 0.29000000000000004,\n",
       " 'b234': 0.41600000000000004,\n",
       " 'b247': 0.6639999999999999,\n",
       " 'b248': 0.642,\n",
       " 'b261': 0.648,\n",
       " 'b262': 0.5820000000000001,\n",
       " 'b263': 0.552,\n",
       " 'b264': 0.616,\n",
       " 'b277': 0.43200000000000005,\n",
       " 'b278': 0.488,\n",
       " 'b360': 0.19199999999999995,\n",
       " 'b396': 0.016000000000000014}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_fix_threshold(results, recall):\n",
    "    fix_thresholds = {}\n",
    "    for r in results:\n",
    "        train_name = r[\"train_name\"]\n",
    "        \n",
    "        if train_name not in fix_thresholds:\n",
    "            fix_thresholds[train_name] = {}\n",
    "            \n",
    "        precs, recalls, probs = r.prec_rec_curve\n",
    "        \n",
    "        idx = nearest(recalls, recall)\n",
    "        \n",
    "        fix_thresholds[train_name] = probs[idx]\n",
    "    return fix_thresholds\n",
    "\n",
    "\n",
    "thresholds = get_fix_threshold(kfolds_results, FIXED_RECALL)\n",
    "thresholds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensembles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['b206', 'b214', 'b216', 'b220', 'b228', 'b234', 'b247', 'b248', 'b261', 'b262', 'b263', 'b264', 'b277', 'b278', 'b360', 'b396']\n"
     ]
    }
   ],
   "source": [
    "tiles = list(sorted(data))\n",
    "print(tiles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"_cache/all_kfolds_full_clfs.pkl.bz2\"\n",
    "full_clfs = joblib.load(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x72 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def grouped(clfs):\n",
    "    groups = {}\n",
    "    for tile in tiles:\n",
    "        groups[tile] = [c for c in clfs if c.test_name == tile]\n",
    "    return groups\n",
    "\n",
    "def ensemble(grouped):\n",
    "    results = []\n",
    "    for t, g in grouped.items():\n",
    "        y_tests = g[0].real_cls\n",
    "        \n",
    "        probabilities = (np.sum([e.probabilities for e in g], axis=0) / len(g))\n",
    "        \n",
    "        fpr, tpr, thresholds = metrics.roc_curve(\n",
    "            y_tests, 1.-probabilities[:,0], pos_label=1)\n",
    "        prec_rec_curve = metrics.precision_recall_curve(\n",
    "            y_tests, 1.- probabilities[:,0], pos_label=1)\n",
    "\n",
    "        roc_auc = metrics.auc(fpr, tpr)\n",
    "\n",
    "        result = Container({\n",
    "            \"idx\": 0,\n",
    "            \"clf_name\": \"RF\",\n",
    "            \"train_name\": \"Ensemble\",\n",
    "            \"test_name\": t,\n",
    "            'fpr': fpr,\n",
    "            'tpr': tpr,\n",
    "            'thresh': thresholds,\n",
    "            'roc_auc': roc_auc,\n",
    "            'prec_rec_curve': prec_rec_curve,\n",
    "            'real_cls': y_tests,\n",
    "            'predictions': None,\n",
    "            'probabilities': probabilities,\n",
    "            'confusion_matrix': None})\n",
    "        results.append(result)\n",
    "    return results\n",
    "\n",
    "def as_edf(data):\n",
    "    rows, tiles = [], sorted(list(data.keys()))\n",
    "    for rname in tiles:\n",
    "        row = data[rname].copy()\n",
    "        row.update({\"Train\": rname}) \n",
    "        rows.append(row)\n",
    "    df = pd.DataFrame(rows)\n",
    "    df = df.set_index(\"Train\")\n",
    "    return df\n",
    "\n",
    "def ensemble_heatmap(ax, results):\n",
    "    cmap = sns.cm.rocket\n",
    "    \n",
    "    fix_recall, fix_precs = {}, {}\n",
    "    for r in results:\n",
    "#         return r\n",
    "        train_name, test_name = r[\"train_name\"], r[\"test_name\"]\n",
    "        efold_thrs = np.average([v for k, v in thresholds.items() if k != train_name])\n",
    "        \n",
    "        if train_name not in fix_recall:\n",
    "            fix_recall[train_name] = {}\n",
    "            fix_precs[train_name] = {}\n",
    "            \n",
    "        precs, recalls, probs = r.prec_rec_curve\n",
    "        \n",
    "        idx = nearest(probs, efold_thrs)\n",
    "        \n",
    "        fix_recall[train_name][test_name] = recalls[idx]\n",
    "        fix_precs[train_name][test_name] = precs[idx]\n",
    "    \n",
    "    fix_precs = as_edf(fix_precs)\n",
    "    fix_recall = as_edf(fix_recall)\n",
    "    \n",
    "    sns.heatmap(fix_precs, annot=True, fmt='.3f',  linewidths=.5, ax=ax[0], cmap=cmap, center=.5, vmin=0., vmax=1.)\n",
    "    ax[0].set_xlabel(\"Test\")\n",
    "    ax[0].set_title(u\"Precision\")\n",
    "    \n",
    "    sns.heatmap(fix_recall, annot=True, fmt='.3f', linewidths=.5, ax=ax[1], cmap=cmap, center=.5, vmin=0., vmax=1.)\n",
    "    ax[1].set_xlabel(\"Test\")\n",
    "    ax[1].set_title(u\"Recall\")\n",
    "\n",
    "fig, axes = plt.subplots(1, 2, figsize=(25, 1))\n",
    "\n",
    "\n",
    "\n",
    "grouped = grouped(full_clfs)\n",
    "ensemble = ensemble(grouped)\n",
    "ensemble_heatmap(axes, ensemble)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'b214': {'b206',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b216': {'b206',\n",
       "  'b214',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b220': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b228': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b234': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b247': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b248': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b261': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b262': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b263': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b264': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b277': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b278': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b360',\n",
       "  'b396'},\n",
       " 'b360': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b396'},\n",
       " 'b396': {'b206',\n",
       "  'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360'},\n",
       " 'b206': {'b214',\n",
       "  'b216',\n",
       "  'b220',\n",
       "  'b228',\n",
       "  'b234',\n",
       "  'b247',\n",
       "  'b248',\n",
       "  'b261',\n",
       "  'b262',\n",
       "  'b263',\n",
       "  'b264',\n",
       "  'b277',\n",
       "  'b278',\n",
       "  'b360',\n",
       "  'b396'}}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def temp():\n",
    "    d = {}\n",
    "    for r in full_results:\n",
    "        s = d.setdefault(r.test_name, set())\n",
    "        s.add(r.train_name)\n",
    "        \n",
    "    return d\n",
    "\n",
    "temp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
